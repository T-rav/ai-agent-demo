name: CI

on:
  push:
    branches: [ "*" ]  # Trigger on all branches
  pull_request:
    branches: [ "*" ]  # Trigger on PRs to all branches

jobs:
  # UI Tests
  ui-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
    
    - name: Install UI dependencies
      run: cd ui && npm ci
    
    - name: Run UI linting
      run: make lint-ui
    
    - name: Check UI formatting
      run: make format-check-ui
    
    - name: Check TypeScript compilation
      run: make check
    
    - name: Run UI tests
      run: make test-ui
    
    - name: Upload UI coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./ui/coverage/lcov.info
        flags: ui
        name: ui-coverage

  # Ingest Tests
  ingest-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: ingest/pyproject.toml
    
    - name: Install ingest dependencies
      run: cd ingest && make dev-install

    - name: Run ingest linting and formatting checks
      run: cd ingest && make lint

    - name: Run ingest code formatting check
      run: cd ingest && make format-check

    - name: Run ingest type checking
      run: cd ingest && make type-check
      continue-on-error: true  # Allow mypy to fail for now

    - name: Run ingest security scanning
      run: cd ingest && make security

    - name: Run ingest tests
      run: cd ingest && make test
    
    - name: Upload ingest coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./ingest/coverage.xml
        flags: ingest
        name: ingest-coverage

  # Integration Tests (when we have API)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [ui-tests, ingest-tests]
    if: false  # Disabled until we have API integration
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start services
      run: docker-compose -f docker-compose.dev.yml up -d
    
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    
    - name: Run integration tests
      run: |
        # Add integration test commands here
        echo "Integration tests would run here"
    
    - name: Stop services
      run: docker-compose -f docker-compose.dev.yml down

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Test Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [ui-tests, ingest-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build UI Docker image
      run: |
        cd ui
        docker build -t ai-agent-demo-ui:test .
    
    - name: Test UI Docker image
      run: |
        docker run --rm -d -p 3001:80 --name ui-test ai-agent-demo-ui:test
        sleep 5
        curl -f http://localhost:3001 || exit 1
        docker stop ui-test
    
    # Future: Add ingest Docker build when we have a Dockerfile
    # - name: Build ingest Docker image
    #   run: |
    #     cd ingest
    #     docker build -t ai-agent-demo-ingest:test .